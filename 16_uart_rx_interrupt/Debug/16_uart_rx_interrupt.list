
16_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800049c  080004a4  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800049c  0800049c  000104a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800049c  0800049c  000104a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800049c  080004a4  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004a4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004a4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c3a  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000309  00000000  00000000  0001110e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000114d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebac  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dd0  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053fa2  00000000  00000000  00020edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  00074ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000484 	.word	0x08000484

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000484 	.word	0x08000484

080001d8 <main>:
#define LED_PIN	GPIOA_5

static void uart_callback(void);

char key;
int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <main+0x30>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1U<<10);
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <main+0x34>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_rx_interrupt_init();
 8000200:	f000 f856 	bl	80002b0 <uart2_rx_interrupt_init>

	while(1){
		asm("nop");
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0x2c>
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <uart_callback>:
	}
}

static void uart_callback(void){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <uart_callback+0x3c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <uart_callback+0x40>)
 800021c:	701a      	strb	r2, [r3, #0]

	if(key=='1') GPIOA->ODR |= LED_PIN;
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <uart_callback+0x40>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b31      	cmp	r3, #49	; 0x31
 8000224:	d106      	bne.n	8000234 <uart_callback+0x24>
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <uart_callback+0x44>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <uart_callback+0x44>)
 800022c:	f043 0320 	orr.w	r3, r3, #32
 8000230:	6153      	str	r3, [r2, #20]
	else GPIOA->ODR &=~LED_PIN;
}
 8000232:	e005      	b.n	8000240 <uart_callback+0x30>
	else GPIOA->ODR &=~LED_PIN;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <uart_callback+0x44>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <uart_callback+0x44>)
 800023a:	f023 0320 	bic.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40004400 	.word	0x40004400
 8000250:	2000001c 	.word	0x2000001c
 8000254:	40020000 	.word	0x40020000

08000258 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	//check if RXNE is set
	if(USART2->SR & SR_RXNE) uart_callback();
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <USART2_IRQHandler+0x18>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <USART2_IRQHandler+0x14>
 8000268:	f7ff ffd2 	bl	8000210 <uart_callback>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <__NVIC_EnableIRQ+0x38>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <uart2_rx_interrupt_init>:

	//enable uart module
	USART2->CR1 |= CR1_UE;
}

void uart2_rx_interrupt_init(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	//config uart
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b35      	ldr	r3, [pc, #212]	; (800038c <uart2_rx_interrupt_init+0xdc>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a34      	ldr	r2, [pc, #208]	; (800038c <uart2_rx_interrupt_init+0xdc>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	//start pa2
	GPIOA->MODER &=~(1U<<4);
 80002c0:	4b33      	ldr	r3, [pc, #204]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a32      	ldr	r2, [pc, #200]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002c6:	f023 0310 	bic.w	r3, r3, #16
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6013      	str	r3, [r2, #0]

	//set alternate pa2 tx mode af07
	GPIOA->AFR[0] |= (1U<<8);
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a29      	ldr	r2, [pc, #164]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a26      	ldr	r2, [pc, #152]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	//start pa3
	GPIOA->MODER &=~(1U<<6);
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a20      	ldr	r2, [pc, #128]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800030e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800031a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800031e:	6013      	str	r3, [r2, #0]

	//set alternate pa3 rx mode af07
	GPIOA->AFR[0] |= (1U<<12);
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a1a      	ldr	r2, [pc, #104]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000336:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800033e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000342:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <uart2_rx_interrupt_init+0xe0>)
 800034a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800034e:	6213      	str	r3, [r2, #32]
	//enable apb1
	RCC->APB1ENR = UART2EN;
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <uart2_rx_interrupt_init+0xdc>)
 8000352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000356:	641a      	str	r2, [r3, #64]	; 0x40

	//baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800035c:	490d      	ldr	r1, [pc, #52]	; (8000394 <uart2_rx_interrupt_init+0xe4>)
 800035e:	480e      	ldr	r0, [pc, #56]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 8000360:	f000 f82f 	bl	80003c2 <uart_set_baudrate>

	//transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 8000366:	220c      	movs	r2, #12
 8000368:	60da      	str	r2, [r3, #12]
	//enable rx interrupt
	USART2->CR1 |= CR1_RXNEIE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 8000370:	f043 0320 	orr.w	r3, r3, #32
 8000374:	60d3      	str	r3, [r2, #12]
	//enable  UART2 interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 8000376:	2026      	movs	r0, #38	; 0x26
 8000378:	f7ff ff7c 	bl	8000274 <__NVIC_EnableIRQ>

	//enable uart module
	USART2->CR1 |= CR1_UE;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <uart2_rx_interrupt_init+0xe8>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000386:	60d3      	str	r3, [r2, #12]
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40023800 	.word	0x40023800
 8000390:	40020000 	.word	0x40020000
 8000394:	00f42400 	.word	0x00f42400
 8000398:	40004400 	.word	0x40004400

0800039c <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk+(BaudRate/2U))/BaudRate);
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	085a      	lsrs	r2, r3, #1
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	441a      	add	r2, r3
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b4:	b29b      	uxth	r3, r3
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b084      	sub	sp, #16
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	60f8      	str	r0, [r7, #12]
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	68b8      	ldr	r0, [r7, #8]
 80003d2:	f7ff ffe3 	bl	800039c <compute_uart_bd>
 80003d6:	4603      	mov	r3, r0
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	609a      	str	r2, [r3, #8]
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	; (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 f811 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff fedd 	bl	80001d8 <main>

0800041e <LoopForever>:

LoopForever:
  b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800042c:	080004a4 	.word	0x080004a4
  ldr r2, =_sbss
 8000430:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000434:	20000020 	.word	0x20000020

08000438 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d0d      	ldr	r5, [pc, #52]	; (8000474 <__libc_init_array+0x38>)
 8000440:	4c0d      	ldr	r4, [pc, #52]	; (8000478 <__libc_init_array+0x3c>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	2600      	movs	r6, #0
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	4d0b      	ldr	r5, [pc, #44]	; (800047c <__libc_init_array+0x40>)
 800044e:	4c0c      	ldr	r4, [pc, #48]	; (8000480 <__libc_init_array+0x44>)
 8000450:	f000 f818 	bl	8000484 <_init>
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	2600      	movs	r6, #0
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	0800049c 	.word	0x0800049c
 8000478:	0800049c 	.word	0x0800049c
 800047c:	0800049c 	.word	0x0800049c
 8000480:	080004a0 	.word	0x080004a0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
